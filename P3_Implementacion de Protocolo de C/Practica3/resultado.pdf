library ieee;
use ieee.std_logic_1164.all;
entity Matricial is
port(F:in std_logic_vector(3 downto 0);
    C: inout std_logic_vector(2 downto 0);
    CLK,CLR: in std_logic;
    DISPLAY: inout std_logic_vector(6 downto 0)
    );
end entity;
Architecture A_Matricial of Matricial is
constant dig0: std_logic_vector(6 downto 0):="0000001";--0
constant dig1: std_logic_vector(6 downto 0):="1001111";--1
constant dig2: std_logic_vector(6 downto 0):="0010010";--2
constant dig3: std_logic_vector(6 downto 0):="0000110";--3
constant dig4: std_logic_vector(6 downto 0):="1001100";--4
constant dig5: std_logic_vector(6 downto 0):="0100100";--5
constant dig6: std_logic_vector(6 downto 0):="0100000";--6
constant dig7: std_logic_vector(6 downto 0):="0001111";--7
constant dig8: std_logic_vector(6 downto 0):="0000000";--8
constant dig9: std_logic_vector(6 downto 0):="0000100";--9
constant digG: std_logic_vector(6 downto 0):="1001000";--#
constant digA: std_logic_vector(6 downto 0):="1011010";--*
constant digNP: std_logic_vector(6 downto 0):="1111111";--NP

constant F0: std_logic_vector(3 downto 0):="1110";--F0
constant F1: std_logic_vector(3 downto 0):="1101";--F1
constant F2: std_logic_vector(3 downto 0):="1011";--F2
constant F3: std_logic_vector(3 downto 0):="0111";--F3
constant C0: std_logic_vector(2 downto 0):="110";--C0
constant C1: std_logic_vector(2 downto 0):="101";--C1
constant C2: std_logic_vector(2 downto 0):="011";--C2
signal AUX: std_logic_vector(6 downto 0);
begin
    DECO:PROCESS(F,C)
    begin
        case F & C is
            when F3 & C0 =>AUX<=digG;
            when F3 & C1 =>AUX<=dig0;
            when F3 & C2=>AUX<=digA;
            
            when F2 & C0 =>AUX<=dig9;
            when F2 & C1 =>AUX<=dig8;
            when F2 & C2=>AUX<=dig7;
            
            when F1 & C0 =>AUX<=dig6;
            when F1 & C1 =>AUX<=dig5;
            when F1 & C2=>AUX<=dig4;
            
            when F0 & C0 =>AUX<=dig3;
            when F0 & C1 =>AUX<=dig2;
            when F0 & C2=>AUX<=dig1;
            
            
            when others =>AUX<=digNP;
        end case;
    end process DECO;
    ANILLO: process(CLK,CLR)
    begin
        if(CLR='1') then
            C<="011";
        elsif(CLK'EVENT AND CLK='1') then
            C<=std_logic_vector(bitvector(C)ROL 1);
        end if;
    end process ANILLO;
    REG: process(CLK,CLR)
    begin
        if(CLR='1') then
        DISPLAY<=NP;
        elsif(CLK'EVENT AND CLK='1') then
            if(F="1111") then
                DISPLAY<=DISPLAY;
            else
                DISPLAY<=AUX;
            end if;
        end if;
    end process REG;
end A_Matricial;



